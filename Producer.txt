----application.properties----

server.port=8080

rmq.xname=x1
rmq.qname=q1
rmq.rkey=r1

-----------------------------------------

----ChatProducer.java----

package com.ts.producer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class ChatProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatProducer.class);

    @Value("${rmq.xname}") private String xname;

    @Value("${rmq.rkey}") private String rkey;

    private RabbitTemplate rt;

    ChatProducer (RabbitTemplate rt) {
        this.rt = rt;
    }

    public void publish (String msg) {
        LOGGER.info(String.format("Message sent => %s", msg));
        rt.convertAndSend(xname, rkey, msg);
    }

}

-----------------------------------------

----ProducerConfig.java----

package com.ts.producer;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ProducerConfig {

    @Value("${rmq.qname}") private String qname;

    @Value("${rmq.xname}") private String xname;

    @Value("${rmq.rkey}") private String rkey;

    @Bean
    Queue queue () {
        return new Queue(qname, false);
    }

    @Bean
    TopicExchange exchange () {
        return new TopicExchange(xname);
    }

    @Bean
    Binding binding (Queue queue, TopicExchange exchange) {
        return BindingBuilder.bind(queue).to(exchange).with(rkey);
    }

    @Bean   // only for MongoDB
    MessageConverter converter () {
        return new Jackson2JsonMessageConverter();
    }

    @Bean
    AmqpTemplate amqpt (ConnectionFactory factory) {
        RabbitTemplate rt = new RabbitTemplate(factory);
        rt.setMessageConverter(converter());
        return rt;
    }

}

-----------------------------------------

----ProducerControl.java----

package com.ts.producer;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProducerControl {

    private ChatProducer producer;

    ProducerControl (ChatProducer producer) {
        this.producer = producer;
    }

    @PostMapping("send")
    ResponseEntity<String> sendMsg( @RequestParam("msg") String msg ) {
        producer.publish(msg);
        return new ResponseEntity<>("Sent message", HttpStatus.OK);
    }

}

-----------------------------------------

----ProducerApplication.java----

package com.ts.producer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProducerApplication {

	public static void main(String[] args) {
		SpringApplication.run(ProducerApplication.class, args);
	}
}

