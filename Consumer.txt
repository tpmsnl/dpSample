----application.properties----

rmq.xname=x1
rmq.qname=q1
rmq.rkey=r1
server.port=8081

spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.database=local

-----------------------------------------

----ConsumerConfig.java----

package com.ts.consumer;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ConsumerConfig {

    @Value("${rmq.qname}") private String qname;

    @Value("${rmq.xname}") private String xname;

    @Value("${rmq.rkey}") private String rkey;

    @Bean
    Queue queue () {
        return new Queue (qname, false) ;
    }

    @Bean
    TopicExchange exchange () {
        return new TopicExchange(xname);
    }

    @Bean
    Binding binding (Queue queue, TopicExchange exchange) {
        return BindingBuilder.bind(queue).to(exchange).with(rkey);
    }

    @Bean
    MessageConverter converter(){       // if DB is MongoDB
        return new Jackson2JsonMessageConverter();
    }

    @Bean
    AmqpTemplate amqpTemplate(ConnectionFactory connectionFactory){
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setMessageConverter(converter());    // if DB is MongoDB
        return rabbitTemplate;
    }
}


-----------------------------------------

----ChatConsumer.java----

package com.ts.consumer;

import java.sql.Timestamp;
import java.util.Random;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ChatConsumer {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChatConsumer.class);

    private LogPosting lp;

    private Random rd = new Random();

    ChatConsumer(LogPosting lp) {
        this.lp = lp;
    }

    @RabbitListener(queues = "${rmq.qname}")
    public void consume( String msg ) {

        Logs obj = new Logs();

        obj.setId(rd.nextInt(1000)+5);
        obj.setTs(new Timestamp(System.currentTimeMillis()));
        obj.setMsg(msg);

        LOGGER.info(obj.toString());

        lp.save(obj);
    }
}

-----------------------------------------

----Logs.java----

package com.ts.consumer;

import java.sql.Timestamp;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import lombok.Data;
import lombok.ToString;

@Data @ToString
@Document(collection = "rmq")
public class Logs {

    @Id
    private int id;

    private String msg;

    private Timestamp ts;
}

-----------------------------------------

----ConsumerApplication.java----

package com.ts.consumer;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ConsumerApplication {

	public static void main(String[] args) {
		SpringApplication.run(ConsumerApplication.class, args);
	}
}

-----------------------------------------

----LogPosting.java----

package com.ts.consumer;

import org.springframework.data.mongodb.repository.MongoRepository;

public interface LogPosting extends MongoRepository<Logs, Integer> {
}


